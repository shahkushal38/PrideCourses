Topic- Linked List

Linked Lists are linear or sequential data structures in which elements are stored at non-contiguous memory locations and are linked to each other using pointers.

Like arrays, linked lists are also linear data structures but in linked lists elements are not stored at contiguous memory locations. They can be stored anywhere in the memory but for sequential access, the nodes are linked to each other using pointers.

Each element in a linked list consists of two parts:
1) Data: This part stores the data value of the node. That is the information to be stored at the current node.
2) Next Pointer: This is the pointer variable or any other variable which stores the address of the next node in the memory.

Advantages of Linked Lists over Arrays:  
1) The size of the arrays is fixed, so we must know the upper limit on the number of elements in advance.
2) Inserting a new element in an array of elements is expensive, because a room has to be created for the new elements, and to create room, existing elements have to shift. 

Disadvantages of LinkedList - 
1) Random access is not allowed in Linked Lists. We have to access elements sequentially starting from the first node. So, we cannot do a binary search with linked lists efficiently with its default implementation.


Representation of Linked Lists

A linked list is represented by a pointer to the first node of the linked list. The first node is called the head node of the list. If the linked list is empty, then the value of the head node is NULL.

Each node in a list consists of at least two parts:
data
Pointer (Or Reference) to the next node

Java Representation of LinkedList

class LinkedList 
{ 
    Node head;  // head of list 
  
    /* Linked list Node*/
    class Node 
    { 
        int data; 
        Node next; 
           
        // Constructor to create a new node 
        // Next is by default initialized 
        // as null 
        Node(int d) {data = d;} 
    } 
}


Code and Traversal of LinkedList - 


class LinkedList 
{ 
    Node head; // head of list 

    class Node { 
        int data; 
        Node next; 
        Node(int d) { 
            data = d; 
            next=null; 
        } // Constructor 
    } 

    public void printList() 
    { 
        Node n = head; 
        while (n != null) 
        { 
            System.out.print(n.data+" "); 
            n = n.next; 
        } 
    } 

    /* method to create a simple linked list with 3 nodes*/
    public static void main(String[] args) 
    { 
        /* Start with the empty list. */
        LinkedList llist = new LinkedList(); 

        llist.head     = new Node(1); 
        Node second     = new Node(2); 
        Node third     = new Node(3); 

        llist.head.next = second; // Link first node with the second node 
        second.next = third; // Link first node with the second node 

        llist.printList(); 
    } 
}